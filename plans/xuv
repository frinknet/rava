require("rava")

socket.tcp()
socket.udp()
socket.pipe()
socket.http()
socket.https()
socket.ws()
socket.wss()
socket.ftp()
socket.sftp()
socket.ssh()

socket.listen("tcp://ip:port", callback(tcp))
socket.listen("udp://ip:port", callback(udp))
socket.listen("pipe:/file/name", callback(pipe))
socket.listen("http://ip:80", callback(http))
socket.listen("https://ip:8080", callback(https))
socket.listen("ws://ip:8080", callback(ws))
socket.listen("wss://ip:8080", callback(wss))
socket.listen("ftp://ip:8080", callback(ftp))
socket.listen("wss://ip:8080", callback(wss))

socket.connect("tcp://ip:port", callback(tcp))
socket.connect("udp://ip:port", callback(udp))
socket.connect("pipe:/file/name", callback(pipe))


stream:route("site.com/url&query", function()
end, "GET", "POST")

	route.url
	route.code
	route.method
	route.headers
	route.body
	
	route:map({"pattern"}, callback(route))
	route:parse("mime")
	route:close()

http.request("url", callback(route, ...), callback(route))
request.something.somethingelse.get()


process.idle(callback(idle))
process.fiber(callback(idle))
process.thread(callback(idle))
process.timer(callback(idle))
process.sleep(sleep)
process.title(name)
process.find(name)

process.idle(callback(coroutine))
process.fiber(callback(coroutine))
process.thread(callback(coroutine))

	coroutine:yield()
	coroutine:sleep()
	coroutine:wake()
	coroutine:close()


process.timer(freqency, repitition, cb(timer))

	timer:yield()
	timer:sleep()
	timer:close()


process.event(trigger, callback(...)))
process.trigger(trigger, ...)
process.remove(trigger)
process.kill(name)

	incident.type
	incident.time
	incident.data

system.cpu()
system.load()
system.memory()
system.interfaces()
system.execute(command, callback(stdin, stdout, stderr))

system.dns()
system.uptime()
system.hrtime()
system.[fs_func]()
system.cache(size, ttl, factor, MT)

	cache:set(k, v)
	cache:set(k, callback(k))
	cache:get(k, callback(k))
	cache:inc(k)
	cache:dec(k)
	cache:del(k)
	cache:size(k)
	cache:exists(k, ...)
	cache:expire(k, s)
	cache:persist(k)
	cache:ttl(k)
	cache:keys(p)


socket
process
system
