require("rava")

tcp.listen("ip:port", callback(stream))
tcp.connect("ip:port", callback(stream))

udp.listen("ip:port", callback(stream))
udp.connect("ip:port", callback(stream))

pipe.listen("sock", callback(stream))
pipe.connect("sock", callback(stream))

stream:sync(true or false)
stream:write(chunk, callback(error))
stream:read(callback(chunk))
stream:stop()
stream:wait(callback(note))
stream:close(note)

http.listen("ip:port", callback(router))
http.connect("url", callback(router))
http.[method]("url", data, headers)

https.listen("ip:port", callback(route))
https.connect("url", callback(route))
https.[method]("url", data, headers)

	route.url
	route.code
	route.method
	route.headers
	route.body
	
	route:map({"pattern"}, callback(route))
	route:parse("mime")
	route:close()

http.request("url", callback(route, ...), callback(route))
request.something.somethingelse.get()


fiber.create(callback(coroutine))
thread.create(callback(coroutine))

	coroutine:yield()
	coroutine:sleep()
	coroutine:wake()
	coroutine:close()


timer.new(freqency, repitition, cb(timer))

	timer:yield()
	timer:sleep()
	timer:close()


event.listen("triggers", callback(incident))
event.trigger("trigger", ...)
event.remove("trigger", callback)

	incident.type
	incident.time
	incident.data

cache.new(size, ttl, factor, callback(k))

	cache:set(k, v)
	cache:set(k, callback(k))
	cache:get(k, callback(k))
	cache:size(k)
	cache:exists(k, ...)
	cache:expire(k, s)
	cache:persist(k)
	cache:ttl(k)
	cache:keys(p)


system.cpu()
system.load()
system.memory()
system.interfaces()
system.execute(command, callback(stdin, stdout, stderr))

system.uptime()
system.[fs_func]()


